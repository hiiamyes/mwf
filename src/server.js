// Generated by CoffeeScript 1.9.2
(function() {
  var Forecast, app, async, collectionName, crawler, env, express, forecastSchema, mongoose, port;

  env = process.env.NODE_ENV || 'dev';

  console.log(env + ' mode');

  collectionName = env === 'production' ? 'forecasts' : 'forecast_dev';

  express = require('express');

  mongoose = require('mongoose');

  async = require('async');

  app = express();

  app.set('view engine', 'jade');

  app.set('views', __dirname + '/app/view');

  app.use(express["static"](__dirname + '/'));

  app.get('/', function(req, res) {
    return res.render('index');
  });

  crawler = require('./hut/scripts/crawler.js');

  crawler.crawl(MongoClient, mongoServerUrl, collectionName);

  forecastSchema = mongoose.Schema({
    forecastHour: {},
    forecastDay: {}
  });

  Forecast = mongoose.model(collectionName, forecastSchema);

  app.get('/api/mountains', function(req, res) {
    var db;
    mongoose.connect('mongodb://yes:yes@ds035280.mongolab.com:35280/hiking');
    db = mongoose.connection;
    db.on('error', console.error.bind(console, 'connection error:'));
    return db.once('open', function(callback) {
      return async.series({
        query: function(callback) {
          return Forecast.find({}, function(err, docs) {
            if (err) {
              console.log('gg');
              return callback(null);
            } else {
              res.status(200).send(docs);
              return callback(null);
            }
          });
        },
        close: function(callback) {
          mongoose.disconnect();
          return callback(null);
        }
      }, function(err, results) {
        return console.log('ya');
      });
    });
  });

  port = Number(process.env.PORT || 8080);

  app.listen(port, function() {
    return console.log('Listening on ' + port);
  });

}).call(this);
